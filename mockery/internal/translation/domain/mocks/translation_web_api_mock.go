// Code generated by mockery v2.42.3. DO NOT EDIT.

package domain

import (
	context "context"

	domain "github.com/dangquyitt/tech-explorer/mockery/internal/translation/domain"
	mock "github.com/stretchr/testify/mock"
)

// TranslationWebAPIMock is an autogenerated mock type for the TranslationWebAPI type
type TranslationWebAPIMock struct {
	mock.Mock
}

// Translate provides a mock function with given fields: ctx, orgText, source, dest
func (_m *TranslationWebAPIMock) Translate(ctx context.Context, orgText string, source string, dest string) (*domain.Translation, error) {
	ret := _m.Called(ctx, orgText, source, dest)

	if len(ret) == 0 {
		panic("no return value specified for Translate")
	}

	var r0 *domain.Translation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.Translation, error)); ok {
		return rf(ctx, orgText, source, dest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.Translation); ok {
		r0 = rf(ctx, orgText, source, dest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Translation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, orgText, source, dest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTranslationWebAPIMock creates a new instance of TranslationWebAPIMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTranslationWebAPIMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TranslationWebAPIMock {
	mock := &TranslationWebAPIMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
